% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatxml.r
\name{fxml_findPathFull}
\alias{fxml_findPathFull}
\title{Finding XML elements}
\usage{
fxml_findPathFull(xmlflat.df, path, attr.only = NULL, attr.not = NULL)
}
\arguments{
\item{xmlflat.df}{A flat XML dataframe created with \code{\link{fxml_importXMLFlat}}.}

\item{path}{A character vector representing the path to be searched. Each element of the vector is a hierarchy level in the XML document. Example: \code{path = c("tag1", "tag2")}.}

\item{attr.only}{A list of named vectors representing attribute/value combinations the XML elements on the search path must match.
The name of an element in the list is the XML elment name to which the attribute belongs. The list element itself is a named vector.
The vector's elements represent different attributes (= the names of the vector elements) and their values (= vector elements).
Example: \code{attr.only = list(tag1 = c(attrib1 = "Value 1", attrib2 = "Value 2"), tag2 = c(attrib3 = "Value 3"))} will only find those elements which lie on a
path that includes \code{<tag1 attrib1 = "Value 1" attrib2 = "Value 2"><tag2 attrib3 = "Value 3">}.}

\item{attr.not}{A list of vectors representing attribute/value combinations the XML elements on the search path must not match to be included in the results. See argument \code{attr.only} for details on the composition.}
}
\value{
The IDs (\code{xmlflat.df$elemid.}) of the XML elements that are located on the provided path. Sub-elements of the elements on the search path are not returned as they have a different search path. \code{NULL}, if no elements where found.
}
\description{
Finds all XML elements in an XML document that lie on a certain path. The path of the found elements must match exactly the search path.
}
\details{
With \code{fxml_findPathRoot()}, the search always starts at the root node of the XML document. Only if an element has exactly the same path as the search path, it is returned as a result.
If, for example, \code{path = c("tag1", "tag2")} then the element with full XML path \code{<tag1><tag2><tag3>} would not be found, only if search path were \code{c("tag1", "tag2", "tag3")}.

Other \code{fxml_findPath...()} functions allow for different search modes:
\itemize{
\item \code{\link{fxml_findPath}}: Search for path anywhere in the XML document (not necessarily starting at the root node). Sub-elements are returned, too.
\item \code{\link{fxml_findPathRoot}}: Search for path from the root node of the XML document downwards. Sub-elements are returned, too.
\item \code{\link{fxml_findPathBottom}}: Search for path from the bottom of the element hierarchy in the XML document.
}
}
\examples{
# Load example file with population data from United Nations Statistics Division
# and create flat dataframe
example <- system.file("worldpopulation.xml", package="flatxml")
xml.dataframe <- fxml_importXMLFlat(example)

# Find all XML elements that have the exact path <root><data><record>
path <- c("root", "data", "record")
fxml_findPathFull(xml.dataframe, path)
}
\seealso{
\code{\link{fxml_findPath}}, \code{\link{fxml_findPathRoot}}, \code{\link{fxml_findPathBottom}}
}
\author{
Joachim Zuckarelli \email{joachim@zuckarelli.de}
}
